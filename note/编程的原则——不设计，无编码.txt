思考――设计/中文伪代码/画图――练习能力,打读说――使用工具和库，copy――总结归纳――
最后需要写一个 项目完成文档（总结自己的项目结构，函数api和顺序，关联）

设计需要参考资料：别人的程序，先分析别人类似是怎么做的，然后写一个参考文档，列举其他人的项目实现（中文化）  然后开始自己的项目设计

参考文档：参考的资料不光是网上的函数，还有成熟项目的实现（如ui，交互，有源码最好），
包括ui是怎么排布，交互是如何的，都要写成中文形式
对图形也要用 中文分析，包括形状，颜色，大小，位置，效果，动态变化，特效，动画变换，移动，交互，都用中文描述                                                    
对于参考项目的函数名，变量名，模块关系必须得列举
都要写到参考文档中（中文化）   一一列举    

工具列表：api  库   其他工具（包括原生库函数）
变量和函数列举：全局   对象  类  局部重要变量      
英文名：  对于开发模块，需要先查到英文名，写入开发文档  这样方便中英文互译

函数内容组织：变量：内部变量 传入的参数 本对象属性 外部变量（全局） 赋值常量 内部创建的对象 函数返回值  表达式计算值
传入的参数 或者内外部变量类型： 值类型 （变量，字面量） 对象类型  集合类型（数组等）
内部调用的函数： 自身对象方法 外部对象方法 全局函数 匿名函数 参数函数  功能：对传入值计算并返回   遍历集合-遍历查找并返回get  遍历查找并修改（set） 遍历并统计
根据索引或者key来增删查改   根据集合游标（cursor）来增删查改    根据 状态变量 控制程序执行流（开关：是否执行if(==) 状态码：执行哪个switch  ）    根据计数器变量和状态变量控制重复执行流向     修改生成新的值：通过计算，通过函数返回――用return接收，用集合或者对象参数接收，用外部变量接收

对于不知道如何实现的功能，先查资料，再把资料加入项目文档（中文）――不要直接编码进项目，或者直接复制粘贴

先把设计文档写完善再开发：在编码时尽量让思考最少化，写代码时严格按照文档来
如果想到什么新功能或者bug，就按顺序加入到文档，但是不要立刻修改，而是应该开发完毕再一个个改    

设计文档要细致：
列举要实现的功能， 模块，模块内部 的属性和模块（对象属性方法）   实现的方式(算法)
列举所有需要用到的工具和资源以及数值：API  图片 字体 所有用到的常量（宽高大小颜色白分比字体）  ，设计得越详细越好――减少写代码时的思考   组织变量
列举所有用到的标准库api 和外部库/组件api ――不要在编码时思考用什么――先查清楚所有实现想法的工具，写成中文伪代码――设计好基本的数据和函数以及连接关系――对于使用的固定数值（常量），需要认真思考（比如gui的各种样式和组件交互）

参考别人代码进行模仿   包括UI也需要模仿，布局也要抄出来，抄漂亮的
可以准备一些框架，直接套模板上

运行时：应该尽可能单独测试函数功能

设计函数，然后一个个地测，不要把代码挤在一起运行。。。不过增量式开发似乎也是好方案？
先编写api而不是用例
要有并发编程的思想……

知识+工具/库/资源+参考资料（照抄）+设计文档笔记+伪代码+格式+实现

写代码时开个笔记本，需要一个txt或者wps来做中文设计，一个模仿参考代码，一个api和语法手册（知道自己可以使用哪些工具，用哪些思想，有什么需要小心和注意的）

先思考程序有哪些功能，用户要输入什么，程序会输出什么。。。根据界面或者根据输入输出来设计（网页就先设计页面布局，再设计数据名，功能函数名;游戏同样，设计布局，再设计数据和功能）
做了上层设计，然后思考最简单的实现（demo），用最简单的情况归纳出整体的情况

准备工具、api、库，资源

程序必须要有个目录，各个函数名

中文化：  使用中文计划  中文写方案 中文注释   设计中文的属性名，方法名

注释：不要一行一个，而应该以对象/类为单位   以代码块为单位    按照顺序分层写成注释目录的形式   方法
类似api文档

/*对象    @属性   1、2、3  @方法123  @参数  @返回值*/      实现和内部局部变量其实没必要标，最多在方法注释里写下是如何实现的

图形化的注释，把各项数据放在成果图上

函数的拆分和行为命名：尽量让函数执行单任务，如果函数需要多个任务，语句可能会很复杂的时候，可以抽出语句 形成新函数，原来的函数调用新函数就行了  
拆分原则，最好采取并列拆分，最好不要拆成嵌套调用的形式，函数调用层次太深没好处，不好追踪。
不过嵌套调用也不是不行。把函数定义在同一层就行了

实际上不同语句是实现不同功能，既然功能不同，就应该命名一下 int a=1 拆分出来名为setA(1) 即使再简单的语句也应该分清逻辑
功能往小了拆


界面化：  要有清晰的输出 和排版

模块化，接口化  面向对象的思维来  先写计划  然后设计对象名  对象数据  对象方法 （中文） ，先写出函数接口再思考如何实现    输入输出  

接口的依赖关系，有的方法需要调用同一个对象的方法，和对象属性，也可以先想好  不用想实现，只用放个空方法，空数据进入方法体 ，这一步不是必须的

解除耦合，不要在对象内部直接使用外部对象和变量或者方法，而应该在内部创建（最好多态化），或者通过参数传入

a{b:{} c{}  }组合对象

所有全局变量  类  函数/对象变量  方法都用中文记录下来

对于函数的算法实现：要用中文写逻辑，一步步推   已知条件  未知条件 能用到的工具
可以写成中文伪代码


计划性：列出详细的计划   至少要能一次实现一个粗糙的样板  然后立刻投入使用，之后迭代

计划中需要使用一些方便的工具/库     这也要规划好


积累代码、模板、库   做好中文标注

目录化：工程需要目录   代码需要索引，需要整理顺序   笔记需要清晰，不能乱糟糟一片


写脚本


一个函数的输入：局部变量，参数，外部变量（包括指针指向的， 传入的数组，对象属性）
输出   ：返回值   修改的外部变量，引用类型的参数的属性  指针类型参数指向的值


测试是动态输入（比如循环，随机，或者从表中取，不同类型，不同内容），检查返回值（或者其他输出，比如修改的外部值），自动校验返回的范围，语义，类型     输入N个，输出N个   也可以用肉眼看

单元测试，不要调用整个程序，编译运行，会很卡

一层层测试，从底层函数，到上层封装的函数，测试行为是否正常。

输入的形式：连续值测试  行为测试（默认应该进行的输入行为）

设计测试函数要获取输出的值，并把该值进行检测，并以某种形式显示出来（图像显示，数字显示，运动模拟）


版本控制：git  commit提交到本地  ,可以回退到任何时期  push提交到远程仓库
