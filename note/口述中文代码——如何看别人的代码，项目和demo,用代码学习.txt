代码学习是自顶而下，从系统到模块   看模块  看模块中的接口  看接口调用的内部接口，  看各方法的实现    看数据结构的定义
看语句，原则上每个语句或者一组语句都是可以用中文表述含义的，所以需要清楚表达
最好的设计是一组语句实现一个功能
看数据的流向  变化的属性和不变的属性    

结构化代码阅读：从上层向下层看
整体概括部分   对于语句块和语句要学会概括 功能    要用整体功能代替语句
用集合的整体代替多次出现的 单个数据的变化    
用整体的行动代替重复的语句  着眼于功能意义而不是具体实现     
就当是把函数折叠了  把重复语句折叠了

 语句块可以看成是一连串方法的集合  （或者说没命名的方法）
局部变量可以看作是属性吗？  它应该是方法的内在属性（逻辑意义上）
是属性行为的抽象  
语句本身就是属性行为的抽象    属性本身就是对象  
语句 也可能是多种行为的综合   可能不止一个对象  不止一次通信， 不止一此发生互动

运算关系是 由  一个或者两个集合  映射出另一个集合的 关系   执行运算就获得了另一个集合――集合值间运算      两个对象的运算会导致产生一个新对象
这里的运算是广义的运算    

函数是输入输出的映射   也是一连串运算的复合   函数也是一种运算？

函数从外部接受外部的属性，然后和自己的属性进行通信     外部是不特定多的
自己的属性是不特定多的        内部方法也是不特定多的、
函数调用其他函数时，就和其他函数产生的无数属性产生了交集   数据的流向也会更为麻烦
赋值的意义是变量的变化   变量变为    或者是数据的流向


关于依赖     解除耦合只是接触了特定的类，类名依赖   但是 对于对象参数名   ，对于特定的方法名，只要不深入到定义中修改，始终是会有依赖    在不修改引用类，不修改被引用类的前提下，设置新类，重写方法   ，然后修改引用类中的注解  ，这样的优越性是什么呢？ 


==的意义是值的比较  is
调用的意义是获取值  或者执行某种行为   函数必然有输出，可能是输出给控制台，或者输出给外部量了
switch的意义根据不同的  状态变量   来执行不同的语句  函数    
对象是属性的列举
if else的意义是选择     for（）中其实是初始化一个变量 （计数器，只初一次）  每次循环都判断是否终止   在每次循环末尾执行计数器的改变      （虽然不止可以这么用）



代码用中文念出来，或者手打出来   口述时尽量不要遗漏  静态  方法名  调用 定义变量 公开私有 初始化  赋值

输入输出框  判断框  处理框     输入输出可能是外部值  
组合对象:全局传入  set传入  构造传入
相对全局变量：在当前调用环境中存在的变量，可以直接被调用的函数内部访问到的，不需要通过参数传入的，包括调用函数所在对象的属性，调用函数自己的局部   

语句结构――按语法分类  定义 调用 赋值 表达式  条件（是否）  条件（分支）   按语义（功能）分类：伪代码           

初期看demo   深入就看完整结构    需要先结构  后具体实现   

0：不要管功能是如何实现，先知道要实现什么功能

0.1：分析时一定要做笔记

0.2：如果函数用到类库，最好学学类库知识

零、自顶而下  先看模块，类，了解整个系统的功能划分

一、尽可能分拆所有的函数  全局变量  用中文解释  注名

二、理清函数  变量的作用   由调用顺序分析程序执行的流程  

三、理清函数 的   输入  输出   稍微进去看下 依赖关系:用到的全局变量，调用的其他函数等

四、实在不懂的函数可以进去看看，认真分析