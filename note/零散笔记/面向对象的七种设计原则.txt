面向对象的各原则是为了各层间的解耦   不要一次修改多个地方


接口用于模块通信，对象方法内部调用私有方法，不是接口，实际上是把接口方法拆分成小函数了，再委托调用

利用字符或者数字参数代替直接传入对象参数，实现解耦，工厂模式 

多态的意义：在main方法中传入不同的new   ，只需要在main中改，不用特意再去改使用的类了，最少修改
最理想的状态是所有的修改只在用例中进行，在所有定义完毕的类都是不需要修改的。  只改调用层，不改底层



面向对象   要多用组合  少用继承   可以减少耦合

处理流程：顺序执行，或者是每个步骤都拆分成函数

对象组合的方式   构造传入（工厂，反射）  set方法，参数传入  全局传入   

要把职责拆分给其他对象――组合对象――调用其他对象的方法来实现
对象之间只用接口通信


依赖：  对象作为另一个对象的方法参数，局部变量，返回值
聚合：作为另一个对象的属性  整体和部分
组合：作为另一个对象的属性   但是方法被严重依赖，不可分离


一、单一职责    一个类不应该做无关的业务

二、开闭   允许扩展  拒绝修改   尽可能新增代码而不要修改原代码（），一开始每层都多设计接口


三、里氏替换   必须完全实现父的方法（不能有空接口）   每次使用必须用父类接口？
自己的行为和属性 通过接口使用？（能够吗？访问得到吗？似乎不能）   可以重载参数（必须更多）  可以缩小返回值

四、依赖倒转（反转）  高层不依赖底层，不依赖具体实现  而依赖接口    依赖的对象如何传入？组合法
什么是底层 什么是高层？  被组合的对象属于底层

什么是依赖：  底层对象作为参数？作为局部？     依赖接口――多态注入

高层底层依赖同样的抽象？  高层使用抽象接口   底层实现接口

适配器模式？


五、接口分离   接口功能单一   不必要的函数不要暴露为接口    使用委托来分离接口 （委托就是调用自己或者其他对象的方法，比如自己的私有方法，别人的接口方法）
六、合成复用   使用组合而不是继承，   使用委托调用其他对象的方法来实现功能的复合
七、迪米特，最小知识   对象应该降低互相的了解  只用接口通信，不用管内部原理  
调用对方的方法
  千万不要写成对对方属性的复杂表达式操作，或者用自己的方法操作对方的属性
需要尽可能降低访问权限，只留下接口函数 set get search等等来获取或者修改数据   

使用中介类交流？   中介对象会不会越来越多？   如果使用总中介类，中介模式，是不是负担太重？  调用中介对象的方法，从而间接和另一个对象通信    

控制器作为中介  多个界面控制多个DAO对象


   