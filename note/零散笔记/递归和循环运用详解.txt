无限循环  消息循环   所有win程序最后都停在一个循环   事实上windos最后也是无限循环

   while(1)   while(true )  for(;;) 这时候要么异常停止，或者事件触发停止，要么
里面写终止条件，return或者break       

尾递归  ：是可以不用返回的递归，就是一直向下执行，不用回退，return，到最后一口气平衡所有堆栈

特殊尾递归？  return func()   这种不属于尾递归，需要一层层向上返回值

尾递归比中间递归危险吗？不一定吧，如果中间递归一直不返回，和尾递归占用的栈差不多。。。而且尾递归反而可以优化吧？

递归是否有返回值

中间递归    调用自身的行为实际上是截断了语句的执行，  如果一直不return或者强制终止程序，每层递归中，调用语句后面的语句就不会执行

而如果满足某个终止条件，那么调用后的语句就会被继续执行，最终返回（返回值可以是0或空）。。。这些语句也许需要调用的返回值，作为分支条件，或者其他条件，或者借此向上返回

多递归：往往用于树状结构，分支看情况会随着层次越来越多，由于两个调用是并列的，必须前一个调用返回才能执行后一个

func(a){    func(b);    func(c);  func(d); }


终止递归有哪些方法

递归分为两层   ，定义和内部调用，    实际上就是函数内语句的重复执行，被重复的语句包括内部调用语句
从形式上来说和for(;;a++){ func(a)  ;  }没什么区别   
或者goto
唯一的区别是每次调用的参数，定义函数会有一个形参    然后内部调用语句的实参会是根据这个形参  推导出来的实参，   其实这里没发生实际调用，也不能称为实参。。。不过可以类比

可以知道，每次传入调用参数都会推导出下一个调用参数，这个推导过程是函数内部非调用语句进行的   
推导规则：可以是任意形式 把参数加减乘除固定值   或者获取对象参数的属性，数组参数的元素（要求本身是个嵌套类型，比如树，多维数组，链表）

注意，这个推导规则不一定是有条理的，它甚至可以是随机数，随机外部变量值，甚至每次都调用原参数


如果是分支多递归，这种一层多次递归


终止条件：计数终止，参数极限值终止  返回值等于特定值终止


循环中  每次循环都做了什么    输入有哪些  （计数器）    变化的变量有几个  都是什么规律
    
块作用域是什么？
for 里面的i 的作用域


累加
累乘
周期  01  +-   *（-1）或者sin() 


循环的用法：遍历  穷举  查找  累加（乘）   遍历的都是某种集合，顺序遍历   
双层循环：二维数组结构遍历

1+2+3+4+5

关于终止条件   

反条件  if(!) 


递归的终止条件 是返回  return   在不是尾递归的时候，默认会自动返回，在是尾递归的时候，不会返回

递归也叫分治，  把递归看成是循环调用的函数黑盒子，注意每一步的输入输出

递归获取值 

getChildAdd

入口，调用，返回   形成链结构或者树结构   

遍历文件   seach_file_from_direct  如果是文件就输出   如果是文件夹 search…………
用到循环和递归两种吧   ，遍历目录下所有文件
  

