参考别人代码进行模仿

先思考程序有哪些功能，用户要输入什么，程序会输出什么。。。根据界面或者根据输入输出来设计（网页就先设计页面布局，再设计数据名，功能函数名;游戏同样，设计布局，再设计数据和功能）

准备工具、api、库，资源

程序必须要有个目录，各个函数名

中文化：  使用中文计划  中文写方案 中文注释   设计中文的属性名，方法名

注释：不要一行一个，而应该以对象/类为单位   以代码块为单位    按照顺序分层写成注释目录的形式   方法
类似api文档

/*对象    @属性   1、2、3  @方法123  @参数  @返回值*/      实现和内部局部变量其实没必要标，最多在方法注释里写下是如何实现的

图形化的注释，把各项数据放在成果图上

函数的拆分和行为命名：尽量让函数执行单任务，如果函数需要多个任务，语句可能会很复杂的时候，可以抽出语句 形成新函数，原来的函数调用新函数就行了  
拆分原则，最好采取并列拆分，最好不要拆成嵌套调用的形式，函数调用层次太深没好处，不好追踪。
不过嵌套调用也不是不行。把函数定义在同一层就行了

实际上不同语句是实现不同功能，既然功能不同，就应该命名一下 int a=1 拆分出来名为setA(1) 即使再简单的语句也应该分清逻辑
功能往小了拆


界面化：  要有清晰的输出 和排版

模块化，接口化  面向对象的思维来  先写计划  然后设计对象名  对象数据  对象方法 （中文） ，先写出函数接口再思考如何实现    输入输出  

接口的依赖关系，有的方法需要调用同一个对象的方法，和对象属性，也可以先想好  不用想实现，只用放个空方法，空数据进入方法体 ，这一步不是必须的

解除耦合，不要在对象内部直接使用外部对象和变量或者方法，而应该在内部创建（最好多态化），或者通过参数传入

a{b:{} c{}  }组合对象

所有全局变量  类  函数/对象变量  方法都用中文记录下来

对于函数的算法实现：要用中文写逻辑，一步步推   已知条件  未知条件 能用到的工具
可以写成中文伪代码


计划性：列出详细的计划   至少要能一次实现一个粗糙的样板  然后立刻投入使用，之后迭代

计划中需要使用一些方便的工具/库     这也要规划好


积累代码、模板、库   做好中文标注

目录化：工程需要目录   代码需要索引，需要整理顺序   笔记需要清晰，不能乱糟糟一片


写脚本


一个函数的输入：局部变量，参数，外部变量（包括指针指向的， 传入的数组，对象属性）
输出   ：返回值   修改的外部变量


测试是动态输入（比如循环，随机，或者从表中取，不同类型，不同内容），检查返回值（或者其他输出，比如修改的外部值），自动校验返回的范围，语义，类型     输入N个，输出N个   也可以用肉眼看

单元测试，不要调用整个程序，编译运行，会很卡

一层层测试，从底层函数，到上层封装的函数，测试行为是否正常。

输入的形式：连续值测试  行为测试（默认应该进行的输入行为）

设计测试函数要获取输出的值，并把该值进行检测，并以某种形式显示出来（图像显示，数字显示，运动模拟）

